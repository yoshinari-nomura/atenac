#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-

require "erb"

class TableParser
  def self.parse(source_string, type = :org)
    address_book = AddressBook.new

    parser =
      case type
      when :org
        ORG.new(source_string)
      when :csv
        CSV.new(source_string)
      else
        Raise "Unknown table type #{type}."
      end

    parser.each_row do |address|
      address_book << address if address.action == "出"
      address_book.me = address if address.action == "自"
    end

    return address_book
  end

  class Base
    attr_reader :source_string

    def initialize(source_string)
      @source_string = source_string
    end
  end

  class CSV < Base
    def each_row(&block)
      require "csv"
      lines = source_string.force_encoding("Shift_JIS").encode("UTF-8")

      ::CSV.parse(lines, :headers => true) do |row|
        yield Address.new(row.to_hash)
      end
    end
  end

  class ORG < Base
    def each_row(&block)
      colnames = []
      lines = source_string.force_encoding("UTF-8").split("\n")

      lines.each do |line|
        next if line =~ /^\s*\|-/    # skip horizontal line |--
        next unless line =~ /^\s*\|/ # skip non-table line

        cols = line.sub(/^\s*\|/, '').sub(/\|\s*$/, '').split('|').map(&:strip)

        if colnames.empty?
          # take the first line as column names.
          colnames = cols
        else
          yield Address.new(Hash[colnames.zip cols])
        end
      end
    end # each_rows
  end # class ORG
end # class Table

class Address
  [:last_name, :first_name, :title, :family_names,
   :zip, :address1, :address2, :action].each do |m|
    self.class_eval("def #{m}; @columns['#{m.to_s}']; end")
  end

  def initialize(hash)
    @columns = {}
    update_attributes(hash)
  end

  def texify(string, rotate = false)
    string = string.tr("0-9a-zA-Z", "０-９ａ-ｚＡ-Ｚ").gsub("-", "\\vminus{}")
    string = string.gsub(/[ー「」．。]/, "\\pbox<z>{\\0}") if rotate
    return string
  end

  def atena(default_title = "様")
    title = self.title.to_s
    title = default_title if !title || title == ""

    atena_string = atena_entry(last_name, first_name, title)
    return atena_string if family_names.to_s == ""

    family_names.split("/").each do |fn|
      if fn =~ /(.*);(.*)/
        fn, fn_title = $1, $2
      else
        fn, fn_title = fn, default_title
      end
      atena_string += atena_entry("", fn, fn_title)
    end
    return atena_string
  end

  def update_attributes(hash)
    hash.each do |key, val|
      @columns[key] = val.to_s
    end
    return self
  end

  def [](key)
    @columns[key]
  end

  def atena_entry(last_name, first_name, title)
    return "\\atenaentry{#{last_name}}{#{first_name}}{#{title}}"
  end
end # class Address

class AddressBook
  TEX_ERB_TEMPLATE = DATA.read

  include Enumerable
  attr_accessor :me

  def initialize
    @addresses = []
    @me = nil
  end

  def each
    @addresses.each do |address|
      yield address
    end
  end

  def <<(o)
    @addresses << o
  end

  def to_tex(tex_erb_template = TEX_ERB_TEMPLATE)
    tex_erb = ERB.new(tex_erb_template, nil, "-")
    address_book = self # binding self = address_book
    return TeX.new(tex_erb.result(binding))
  end
end # class AddressBook

class TeX
  require "tmpdir"

  LATEX = "platex -halt-on-error -interaction=nonstopmode -file-line-error"
  DVIPDF = "dvipdfmx"

  def initialize(tex_string)
    @tex_string = tex_string
  end

  def to_pdf
    tex_string_to_pdf(@tex_string)
  end

  def to_s
    @tex_string
  end

  private

  def tex_string_to_pdf(tex_string)
    # mktmpdir to use PWD for the sake of Docker
    Dir.mktmpdir("atenac", ".") do |dir|
      put_string_to_file(tex_string, "tmp.tex", dir)
      system("cd #{dir}; (#{LATEX} tmp.tex && #{DVIPDF} tmp.dvi) > errors.log 2>&1")
      get_file_content("tmp.pdf", dir) ||
        fail(get_file_content("errors.log", dir).to_s)
    end
  end

  def put_string_to_file(string, filename, directory = ".")
    path = File.expand_path(filename, directory)
    File.write(path, string)
  end

  def get_file_content(filename, directory = ".")
    path = File.expand_path(filename, directory)
    return File.read(path) if File.exist?(path)
    return nil
  end
end # class TeX

module WebService
  require 'webrick'

  class PdfGenerator < WEBrick::HTTPServlet::AbstractServlet
    def do_POST(request, response)
      filename = request.query['file'].filename
      table_type = if filename =~ /\.csv$/i then :csv else :org end

      address_book = TableParser.parse(
        request.query['file'].to_s,
        table_type
      )
      embed_file_in_response(
        response,
        filename.sub(/\.[^.]*$/, ".pdf"),
        address_book.to_tex.to_pdf
      )
    end

    def do_GET(request, response)
      response.body = <<-EOF
        <form method="POST" action="/" enctype="multipart/form-data">
          Upload your address book (csv or org): <input type="file" name="file"/><br/>
          <input type="submit" value="convert"/>
        </form>
      EOF
    end

    private

    def embed_file_in_response(response, filename, file_content)
      response.content_type = ::WEBrick::HTTPUtils.mime_type(filename, ::WEBrick::HTTPUtils::DefaultMimeTypes)
      response.body = file_content
      return response
    end
  end

  class Server
    def initialize(port = 3000)
      @server = ::WEBrick::HTTPServer.new(:Port => port,
                                          :BindAddress => '0.0.0.0'
                                         )
      trap("INT") { @server.shutdown }
      @server.mount('/', PdfGenerator)
    end

    def start
      @server.start
    end
  end
end # module WebService

def usage(exit_status = 1)
  name = File.basename($0)
  spc = " " * name.length
  STDERR.print <<EOF
Usage: #{File.basename($0)} [--debug] [--rotate] [--table-type=TYPE]
       #{spc} [--fontfile=FILE] ADDRESS.org > ADDRESS.tex

  + TYPE: "org" (default) or "csv"
  + FILE: /path/to/font.{ttf,otf}
    You need to set environment variable TTFONTS or OPENTYPEFONTS
    to "/path/to:" on invoking dvipdfmx.
EOF
  exit exit_status
end

def die(error_message)
  STDERR.print error_message, "\n"
  exit 1
end

################################################################
## main
################################################################

$OPT_TABLE_TYPE = :org
$OPT_FONTFILE   = nil
$OPT_ROTATE     = false
$DEBUG_FLAG     = false

while /^-/ =~ ARGV[0]
  case ARGV[0]
  when /^--debug/
    $DEBUG_FLAG = true
  when /^--fontfile=(.*)/
    $OPT_FONTFILE = $1
  when /^--tex/
    $OPT_TEX = true
  when /^--rotate/
    $OPT_ROTATE = true
  when /^--server/
    $OPT_SERVER = true
  when /^--table-type=(org|csv)$/
    $OPT_TABLE_TYPE = $1.to_sym
  else
    usage()
  end
  ARGV.shift
end

if $OPT_FONTFILE
  die "fontfile #{$OPT_FONTFILE} not found." unless File.exist?($OPT_FONTFILE)

  dirname = File.dirname($OPT_FONTFILE)
  extname = File.extname($OPT_FONTFILE)

  case extname
  when /^\.ttf/i
    envname = "TTFONTS"
  when /^\.otf/i
    envname = "OPENTYPEFONTS"
  end
  path = File.expand_path(dirname)
  STDERR.puts "#{envname}=#{path}:"
  ENV[envname] = path
end

if $OPT_SERVER
  puts "Server mode..."
  WebService::Server.new.start

else
  ab  = TableParser.parse(gets(nil), $OPT_TABLE_TYPE)
  if $OPT_TEX
    puts ab.to_tex
  else
    begin
      print ab.to_tex.to_pdf
    rescue => e
      STDERR.puts "Error: #{e}"
      exit 1
    end
  end
end

exit 0

__END__
% # Make addresser pdf for Japanese Nengajo
% #
% # Magic numbers about postcard dimension are defined by Japan post:
% # http://www.post.japanpost.jp/zipcode/zipmanual/p05.html
% # http://www.post.japanpost.jp/about/yakkan/1-3.pdf
% #
% # Dec 28 2014, Yoshinari Nomura <nom@quickhack.net>
% #
% # TODO:
% #   + Use \kansuji or \rensuji ?
% #
\documentclass[dvipdfmx]{jarticle}

\usepackage{type1cm} % # Freely set the font size
\usepackage{plext} % # virtical-writing
\usepackage{color}
\usepackage{graphicx}
\usepackage{adjustbox}

% http://zrbabbler.sp.land.to/pxchfon.html
\usepackage[noalphabet]{pxchfon}
<%- if $OPT_FONTFILE %>
\setminchofont{<%= File.basename($OPT_FONTFILE) %>}
<%- end -%>

\setlength{\unitlength}{1truemm}

% # set paper-size to Hagaki
\setlength{\textwidth}{100mm}
\setlength{\textheight}{148mm}

% # set every margin to zero
\setlength{\oddsidemargin}{-1in}
\setlength{\evensidemargin}{-1in}
\setlength{\topmargin}{-1in}
\setlength{\headheight}{0in}
\setlength{\headsep}{0in}

% # remove page number
\pagestyle{empty}

% # inform papersize to dvipdfmx
\special{papersize=100mm,148mm}

\makeatletter
\def\newdimXYWH#1=(#2,#3,#4,#5){
  \@namedef{#1X}{#2}
  \@namedef{#1Y}{#3}
  \@namedef{#1W}{#4}
  \@namedef{#1H}{#5}}
\makeatother

% ################
% # Adjustment for individual printers
% ################

\def\xoffset{0}
\def\yoffset{0}

% ################
% # Macros for special characters
% ################

% # \vminus -- vertical hyphen
\def\vminus{\hbox{\raisebox{.1zw}{$-$}}\ignorespaces}

% ################
% # Global Constants
% ################

\newdimXYWH senderbox=(8,28,22,58)
\newdimXYWH addressbox=(73,28,17,92)
\newdimXYWH atenabox=(40,28,30,90)
\newdimXYWH zipbox=(44.3,128,5.7,8)

\def\zipboxXoffsetA{0}
\def\zipboxXoffsetB{7}
\def\zipboxXoffsetC{14}
\def\zipboxXoffsetD{21.6}
\def\zipboxXoffsetE{28.4}
\def\zipboxXoffsetF{35.2}
\def\zipboxXoffsetG{42.0}

% ################
% # zip code boxes
% ################

\def\zipframe{%
  {\color{red}\framebox(\zipboxW,\zipboxH){}}%
}

\def\zipnumber#1{%
  \makebox(\zipboxW,\zipboxH){\textcolor{black}{#1}}%
}

\def\zip#1#2#3-#4#5#6#7{
  \put(\zipboxX,\zipboxY){
    \Large
    \put(\zipboxXoffsetA,0){\zipnumber{#1}}
    \put(\zipboxXoffsetB,0){\zipnumber{#2}}
    \put(\zipboxXoffsetC,0){\zipnumber{#3}}
    \put(\zipboxXoffsetD,0){\zipnumber{#4}}
    \put(\zipboxXoffsetE,0){\zipnumber{#5}}
    \put(\zipboxXoffsetF,0){\zipnumber{#6}}
    \put(\zipboxXoffsetG,0){\zipnumber{#7}}
  }}

\def\zipframes{{%
  \put(\zipboxX,\zipboxY){
    \linethickness{0.5mm}
    \put(\zipboxXoffsetA,0){\zipframe}
    \put(\zipboxXoffsetB,0){\zipframe}
    \put(\zipboxXoffsetC,0){\zipframe}
    % # FIXME: 4 => \zipboxH / 2
    % # FIXME: 1.9 => \zipboxXoffsetD - (\zipboxXoffsetC + \zipboxW)
    \textcolor{red}{\put(\zipboxXoffsetD,4){\line(-1,0){1.9}}}
    \linethickness{0.3mm}
    \put(\zipboxXoffsetD,0){\zipframe}
    \put(\zipboxXoffsetE,0){\zipframe}
    \put(\zipboxXoffsetF,0){\zipframe}
    \put(\zipboxXoffsetG,0){\zipframe}
  }}}

% ################
% # address
% ################

\def\addr#1#2{
  \put(\addressboxX,\addressboxY){\makebox(\addressboxW,\addressboxH)[rt]{
      \begin{minipage}<t>[t]{\addressboxH\unitlength}
         \fontsize{12pt}{0}\selectfont
         \kanjiskip=2pt
         % \Large
         #1
        \begin{center}
          #2
        \end{center}
    \end{minipage}}}}

% ################
% # recipient names
% ################

\def\atena#1{
  \put(\atenaboxX,\atenaboxY){%
    % # v-align=Bottom, h-align=Center
    \begin{minipage}<t>[b][\atenaboxW\unitlength][c]{\atenaboxH\unitlength}
      \fontsize{27pt}{0pt}\selectfont % 文字サイズ 行送り
      \kanjiskip=17pt % 文字間隔
      \begin{adjustbox}{max totalsize={\atenaboxH\unitlength}{\atenaboxW\unitlength}}
      \begin{tabular}[h]{llll}
        % \atenaentry{last_name}{first_name}{title}
        % :
       #1
      \end{tabular}
      \end{adjustbox}
    \end{minipage}}}

\def\atenaentry#1#2#3{#1 & \hbox{\hspace{0.5zw}} & #2 & \hbox{\kanjiskip=0pt #3}\\}

% ################
% # framebox for debug
% ################

\newdimXYWH stamp=(8,90,22,50)
\newdimXYWH footer=(4,2,92,23.5)

\def\dashline{
  \multiput(0,0)(0,1.1){5}{\line(0,1){0.55}}
}

\def\debugframe{
  <%- if $DEBUG_FLAG -%>
  \put(\stampX,\stampY){\textcolor{blue}{\framebox(\stampW,\stampH){}}}  % # 切手領域(空ける)
  \put(\footerX,\footerY){\textcolor{blue}{\framebox(\footerW,\footerH){}}} % # お年玉領域(空ける)
  \put(\addressboxX, \addressboxY){\textcolor{red}{\framebox(\addressboxW,\addressboxH){}}} % # 住所
  \put(\atenaboxX, \atenaboxY){\textcolor{red}{\framebox(\atenaboxW,\atenaboxH){}}} % # 宛名
  \put(\senderboxX, \senderboxY){\textcolor{red}{\framebox(\senderboxW,\senderboxH){}}} % # 送り主
  \zipframes
  \senderzipframes
  <%- end -%>
}

% ################
% # sender
% ################

\def\sender#1#2{
  \put(\senderboxX,\senderboxY){
    \begin{minipage}<t>[b][\senderboxW\unitlength][c]{\senderboxH\unitlength}
      \fontsize{9pt}{9pt}\selectfont
      #1
      \begin{flushright}
        \kanjiskip=4pt
        \begin{tabular}[h]{llll}
          #2
        \end{tabular}
      \end{flushright}
    \end{minipage}}}

\def\senderaddress{
  <%- if me = address_book.me -%>
  \senderzip <%= me.zip %>
  \sender{<%= me.texify(me.address1, $OPT_ROTATE) %>}{<%= me.atena("") %>}
  <%- end -%>
}

% ################
% # sender zip
% ################

\def\senderzipframes{
  \put(6,19){\color{red}
    \put(0,0){\dashbox{0.5}(12,5.5){}}
    \put(4,0){\dashline}
    \put(8,0){\dashline}
    \put(13,0){\dashbox{0.5}(16,5.5){}}
    \put(17,0){\dashline}
    \put(21,0){\dashline}
    \put(25,0){\dashline}
  }}

\def\senderzip#1#2#3-#4#5#6#7{
  \put(6,19){
    \put(0,0){\makebox(4,5.5){#1}}
    \put(4,0){\makebox(4,5.5){#2}}
    \put(8,0){\makebox(4,5.5){#3}}
    \put(13,0){\makebox(4,5.5){#4}}
    \put(17,0){\makebox(4,5.5){#5}}
    \put(21,0){\makebox(4,5.5){#6}}
    \put(25,0){\makebox(4,5.5){#7}}
  }}

% ################
% # sender zip
% ################

\def\hagaki#1{
  \noindent
  \begin{picture}(100,148)(\xoffset,\yoffset)
  \debugframe
  \senderaddress
  #1
  \end{picture}
  \newpage
}

% ################
% # main
% ################

\begin{document}
<%- address_book.each do |address| -%>
  \hagaki{
    \zip <%= address.zip %>
    \addr{<%= address.texify(address.address1, $OPT_ROTATE) %>}{<%= address.texify(address.address2, $OPT_ROTATE) %>}
    \atena{<%= address.atena %>}}

<%- end -%>
\end{document}
